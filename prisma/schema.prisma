generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}

model Area {
	id          Int         @unique @default(autoincrement())
	areaName    String      @map("area_name") @db.VarChar(50)
	areaCode    String      @unique @map("area_code") @db.VarChar(50)
	createdAt   DateTime    @default(now()) @map("created_at")
	updatedAt   DateTime    @updatedAt @map("updated_at")
	parentId    Int?        @map("parent_id")
	parent      Area?       @relation("area_parentId_fkey", fields: [parentId], references: [id])
	children    Area[]      @relation("area_parentId_fkey")
	communities Community[]

	@@index([parentId], map: "area_parentId_fkey")
	@@map("area")
}

/// 小区表
model Community {
	id               Int        @unique @default(autoincrement())
	/// 小区名称
	communityName    String     @map("community_name") @db.VarChar(50)
	/// 小区详细地址
	communityAddress String     @map("community_address") @db.VarChar(100)
	createdAt        DateTime   @map("created_at") @db.Date
	updatedAt        DateTime   @updatedAt @map("updated_at")
	areaId           Int        @map("area_id")
	area             Area       @relation(fields: [areaId], references: [id])
	buildings        Building[]
	users            User[]
	residents        Resident[]

	@@index([areaId], map: "community_areaId_fkey")
	@@map("community")
}

/// 楼栋 单元
model Building {
	id           Int        @unique @default(autoincrement())
	///   楼栋 单元名称
	buildingName String     @map("building_name")
	parentId     Int?       @map("parent_id")
	parent       Building?  @relation("building_parent_fk", fields: [parentId], references: [id])
	children     Building[] @relation("building_parent_fk")
	createdAt    DateTime   @map("created_at") @db.Date
	updatedAt    DateTime   @updatedAt @map("updated_at")
	/// 所属小区
	communityId  Int        @map("community_id")
	community    Community  @relation(fields: [communityId], references: [id])
	residents    Resident[]

	@@map("building")
}

// 审核/认证状态
enum VerifyStatus {
	PROCESSING // 认证中
	SUCCESS // 已认证
	ERROR // 未认证
}

enum HouseStatus {
	SELF_OCCUPIED // 自住
	HIRE // 出租
	IDLE // 空闲
}

/// 业主表
model Resident {
	id                  Int          @unique @default(autoincrement())
	/// 业主姓名
	residentName        String       @map("resident_name") @db.VarChar(50)
	/// 业主手机号
	residentPhone       String       @map("resident_phone") @db.Char(11)
	/// 楼层
	floorNumber         Int          @map("floor_number") @db.UnsignedSmallInt
	/// 房间编号
	floorNo             String       @map("floor_no") @db.VarChar(10)
	// 认证状态
	certificationStatus VerifyStatus @default(PROCESSING) @map("certification_status")
	// 房子状态
	houseStatus         HouseStatus  @default(SELF_OCCUPIED) @map("house_status")
	createdAt           DateTime     @map("created_at") @db.Date
	updatedAt           DateTime     @updatedAt @map("updated_at")
	communityId         Int          @map("community_id")
	community           Community    @relation(fields: [communityId], references: [id])
	/// 所属单元
	buildingId          Int          @map("building_id")
	building            Building     @relation(fields: [buildingId], references: [id])
	repairs             Repair[]

	@@map("resident")
}

enum RepairTypeStatus {
	ENABLE
	DISABLE
}

// 报修字典表
model RepairType {
	id             Int              @unique @default(autoincrement())
	repairTypeName String           @unique @db.VarChar(8)
	status         RepairTypeStatus @default(ENABLE)
	sort           Int              @db.UnsignedSmallInt
	createdAt      DateTime         @map("created_at") @db.Date
	updatedAt      DateTime         @updatedAt @map("updated_at")

	@@map("repair_type_dict")
}

/// 报修表
model Repair {
	id         Int      @unique @default(autoincrement())
	/// 问题描述
	repairDesc String   @db.VarChar(255)
	createdAt  DateTime @map("created_at") @db.Date
	updatedAt  DateTime @updatedAt @map("updated_at")
	residentId Int
	resident   Resident @relation(fields: [residentId], references: [id])

	@@map("repair")
}

enum Role {
	ADMIN // 管理员
	EMPLOYEE // 员工
	MANAGER // 物业
}

model User {
	id          Int       @unique @default(autoincrement())
	userName    String    @unique @map("user_name") @db.VarChar(50)
	password    String    @db.VarChar(100)
	role        Role      @default(MANAGER)
	avatar      String?   @db.VarChar(100)
	createdAt   DateTime  @map("created_at") @db.Date
	updatedAt   DateTime  @updatedAt @map("updated_at")
	communityId Int       @map("community_id")
	community   Community @relation(fields: [communityId], references: [id])

	@@map("user")
}
