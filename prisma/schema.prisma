generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  id          Int         @unique @default(autoincrement())
  areaName    String      @map("area_name") @db.VarChar(50)
  areaCode    String      @unique @map("area_code") @db.VarChar(50)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  parentId    Int?        @map("parent_id")
  parent      Area?       @relation("area_parentId_fkey", fields: [parentId], references: [id])
  children    Area[]      @relation("area_parentId_fkey")
  communities Community[]

  @@index([parentId], map: "area_parentId_fkey")
  @@map("area")
}

/// 小区表
model Community {
  id               Int        @unique @default(autoincrement())
  /// 小区名称
  communityName    String     @map("community_name") @db.VarChar(50)
  /// 小区详细地址
  communityAddress String     @map("community_address") @db.VarChar(100)
  createdAt        DateTime   @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  areaId           Int        @map("area_id")
  area             Area       @relation(fields: [areaId], references: [id])
  buildings        Building[]
  users            User[]
  residents        Resident[]

  @@index([areaId], map: "community_areaId_fkey")
  @@map("community")
}

/// 楼栋 单元
model Building {
  id           Int        @unique @default(autoincrement())
  ///   楼栋 单元名称
  buildingName String     @map("building_name")
  parentId     Int?       @map("parent_id")
  parent       Building?  @relation("building_parent_fk", fields: [parentId], references: [id])
  children     Building[] @relation("building_parent_fk")
  createdAt    DateTime   @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  /// 所属小区
  communityId  Int        @map("community_id")
  community    Community  @relation(fields: [communityId], references: [id])
  // 房间
  houses       House[]

  residents Resident[]

  @@map("building")
}

// 审核/认证状态
enum VerifyStatus {
  DEFAULT /// 未认证
  PROCESSING /// 认证中
  SUCCESS /// 已认证
  ERROR /// 认证失败
}

enum HouseStatus {
  SELF_OCCUPIED /// 自住
  HIRE /// 出租
  IDLE /// 空闲
}

model House {
  id          Int         @unique @default(autoincrement())
  /// 楼层
  floorNumber Int         @map("floor_number") @db.UnsignedSmallInt
  /// 房间编号
  floorNo     String      @map("floor_no") @db.VarChar(10)
  houseStatus HouseStatus @default(SELF_OCCUPIED)
  createdAt   DateTime    @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  /// 所属单元
  buildingId Int        @map("building_id")
  building   Building   @relation(fields: [buildingId], references: [id])
  residents  Resident[]

  @@map("house")
}

enum ResidentType {
  OWNER /// 业主
  TENANT /// 租户
}

/// 住户
model Resident {
  id            Int          @unique @default(autoincrement())
  /// 住户姓名
  residentName  String       @map("resident_name") @db.VarChar(50)
  /// 住户手机号
  residentPhone String       @map("resident_phone") @db.Char(11)
  residentType  ResidentType @default(OWNER) @map("resident_type")
  verifyStatus  VerifyStatus @default(DEFAULT) @map("verify_status")
  createdAt     DateTime     @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  communityId   Int          @map("community_id")
  community     Community    @relation(fields: [communityId], references: [id])
  buildingId    Int          @map("building_id")
  building      Building     @relation(fields: [buildingId], references: [id])
  houseId       Int          @map("house_id")
  house         House        @relation(fields: [houseId], references: [id])
  repairs       Repair[]

  @@map("resident")
}

enum RepairTypeStatus {
  ENABLE
  DISABLE
}

// 报修字典表
model RepairType {
  id             Int              @unique @default(autoincrement())
  repairTypeName String           @unique @map("repair_type_name") @db.VarChar(8)
  status         RepairTypeStatus @default(ENABLE)
  sort           Int              @db.UnsignedSmallInt
  createdAt      DateTime         @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  repairs        Repair[]

  @@map("repair_type_dict")
}

/// 报修表
model Repair {
  id             Int              @unique @default(autoincrement())
  /// 问题描述
  repairDesc     String           @map("repair_desc") @db.VarChar(255)
  serviceAt      DateTime         @map("service_at")
  createdAt      DateTime         @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  repairTypeId   Int              @map("repair_type_id")
  repairType     RepairType       @relation(fields: [repairTypeId], references: [id])
  residentId     Int              @map("resident_id")
  resident       Resident         @relation(fields: [residentId], references: [id])
  repairFiles    RepairFile[]
  repairProgress RepairProgress[]

  @@map("repair")
}

model RepairFile {
  id        Int      @unique @default(autoincrement())
  fileUrl   String   @map("file_url") @db.VarChar(100)
  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  repairId  Int      @map("repair_id")
  repair    Repair   @relation(fields: [repairId], references: [id])

  @@map("repair_file")
}

// 角色表
model Role {
  id              Int               @unique @default(autoincrement())
  roleName        String            @unique @map("role_name") @db.VarChar(20)
  createdAt       DateTime          @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  users           User[]
  roleMenus       RoleMenus[]
  rolePermissions RolePermissions[]

  @@map("role")
}

// 权限表
model Permission {
  id              Int               @unique @default(autoincrement())
  permissionName  String            @unique @map("permission_name") @db.VarChar(10)
  permissionCode  String            @unique @map("permission_code") @db.VarChar(50)
  createdAt       DateTime          @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  rolePermissions RolePermissions[]

  @@map("permission")
}

model RolePermissions {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([permissionId, roleId])
  @@map("role_permission")
}

model User {
  id          Int       @unique @default(autoincrement())
  userName    String    @unique @map("user_name") @db.VarChar(50)
  password    String    @db.VarChar(100)
  avatar      String?   @db.VarChar(100)
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  communityId Int       @map("community_id")
  community   Community @relation(fields: [communityId], references: [id])
  roleId      Int       @map("role_id")
  role        Role      @relation(fields: [roleId], references: [id])
  loggers     Logger[]

  @@map("user")
}

enum MenuStatus {
  ENABLE
  DISABLE
}

/// 菜单表
model Menu {
  id           Int         @unique @default(autoincrement())
  menuName     String      @map("menu_name") @db.VarChar(10)
  menuIcon     String?     @map("menu_icon") @db.VarChar(20)
  menuPath     String?     @map("menu_path") @db.VarChar(100)
  menuStatus   MenuStatus  @default(ENABLE) @map("menu_status")
  menuPriority Int         @map("menu_priority") @db.Int
  createdAt    DateTime    @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  parentId     Int?        @map("parent_id")
  parent       Menu?       @relation("menu_parent_fk", fields: [parentId], references: [id])
  children     Menu[]      @relation("menu_parent_fk")
  roleMenus    RoleMenus[]

  @@map("menu")
}

// 用户菜单关联表
model RoleMenus {
  menuId    Int      @map("menu_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  role      Role     @relation(fields: [roleId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])

  @@id([menuId, roleId])
  @@map("role_menu")
}

/// 日志
model Logger {
  id        Int      @unique @default(autoincrement())
  method    String   @db.VarChar(10)
  url       String   @db.VarChar(100)
  query     String
  param     String
  body      Json
  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("logger")
}

// 维修进度流程
model RepairProgress {
  id                  Int                  @unique @default(autoincrement())
  workflowId          Int                  @map("workflow_id")
  workflow            workflowDict         @relation(fields: [workflowId], references: [id])
  createdAt           DateTime             @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  remark              String               @db.VarChar(100)
  repairProgressFiles RepairProgressFile[]

  repairId Int    @map("repair_id")
  repair   Repair @relation(fields: [repairId], references: [id])

  @@map("repair_progress")
}

model RepairProgressFile {
  id               Int            @unique @default(autoincrement())
  fileUrl          String         @map("file_url") @db.VarChar(100)
  createdAt        DateTime       @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  repairProgressId Int            @map("repair_progress_id")
  repairProgress   RepairProgress @relation(fields: [repairProgressId], references: [id])

  @@map("repair_progress_file")
}

/// 工作流程表
model workflowDict {
  id             Int              @unique @default(autoincrement())
  workflowName   String           @map("workflow_name") @db.VarChar(50)
  workflowSort   Int              @map("workflow_sort")
  modelType      Int              @map("model_type")
	createdAt        DateTime       @map("created_at")
	updatedAt        DateTime       @updatedAt @map("updated_at")
  repairProgress RepairProgress[]

  @@map("workflow_dict")
}
